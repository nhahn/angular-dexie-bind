/*! angular-dexie-bind - v0.0.2 - 2015-07-06
* https://github.com/nhahn/angular-dexie-bind
* Copyright (c) 2015 Nathan Hahn; Licensed MIT */
function diff(a,b){return a.filter(function(a){return b.indexOf(a)<0})}!function(){window.DexieSet=function(){function a(b,c,d){var e=Object.create(Array.prototype);return e=Array.apply(e,d)||e,e.query=b,e.context=b._ctx,e.$scope=c,a.injectClassMethods(e),e.$bind(),e.$scope.$on("$destroy",function(){e.$unbind()}),e}return a.injectClassMethods=function(b){for(var c in a.prototype)a.prototype.hasOwnProperty(c)&&(b[c]=a.prototype[c]);return b},a.fromArray=function(b,c,d){var e=a.apply(null,[b,c,d]);return e},a.isArray=function(a){var b=Object.prototype.toString.call(a);return"[object array]"===b.toLowerCase()},a.prototype={$add:function(a){return this.context.table.add(a)},$update:function(a,b){return this.context.table.update(a,b)},$requery:function(){return this.length=0,this.query.toArray().then(function(a){this.$scope.$apply(function(){for(var b=0;b<a.length;b++)this[b]=new DexieRecord(this.context,this.$scope,a[b])})})},$bind:function(){this.$listener=this._listener()},$bind_to:function(a){var b=this;a.on("changes",function(a){for(var c=0;c<a.length;c++){var d=a[c];b.$listener(d)}})},_listener:function(){var a=this;return function(b){b.table==a.context.table.name&&a.$scope.$apply(function(){if(1==b.type){for(var c=0;c<a.length;c++)if(b.obj[a.context.table.schema.primKey.name]==a[c][a.context.table.schema.primKey.name])return;if(a.context.or||0!=a.context.offset)return void a.$requery();if(a.$filter(b))for(var c=0;c<a.length;c++)if("prev"==a.context.dir){if(a[c][a.context.index]<=b.obj[a.context.index])return void a.splice(c,0,new DexieRecord(a.context,a.$scope,b.obj))}else if(a[c][a.context.index]>=b.obj[a.context.index])return void a.splice(c,0,new DexieRecord(a.context,a.$scope,b.obj))}else if(2==b.type){for(var c=0;c<a.length;c++)if(a[c][a.context.table.schema.primKey.name]==b.key)return void(a.$filter(b)&&(a[c]=new DexieRecord(a.context,a.$scope,b.obj)))}else if(3==b.type){if(a.context.limit!=1/0)return void a.$requery();for(var c=0;c<a.length;c++)a[c][a.context.table.schema.primKey.name]==b.key&&a.splice(c,1)}})}},$unbind:function(){this.$listener=function(){}},$filter:function(a){if(this.context.range){if(this.context.range.lower)if(this.context.range.lowerOpen){if(a.obj[this.context.index]<=this.context.range.lower)return!1}else if(a.obj[this.context.index]<this.context.range.lower)return!1;if(this.context.range.upper)if(this.context.range.upperOpen){if(a.obj[this.context.index]>=this.context.range.upper)return!1}else if(a.obj[this.context.index]>this.context.range.upper)return!1}return this.context.isMatch&&!this.context.isMatch(a.obj)?!1:!0}},a}.call({}),window.DexieRecord=function(){function a(b,c,d){for(var e in a.prototype)a.prototype.hasOwnProperty(e)&&(d[e]=a.prototype[e]);return d.$context=b,d.$scope=c,d}return a.prototype={$copy:function(){var a={};for(var b in this)this.hasOwnProperty(b)&&!b.match(/^\$/)&&(a[b]=this[b]);return a},$save:function(){return this.$context.table.put(this.$copy())}},a}.call({});var a=angular.module("ngDexieBind",[]);a.factory("$dexieBind",["$q","$rootScope","$timeout","$log",function(a,b,c,d){var e=function(b,c,d){var e=new a.defer,f=c._ctx.table,g=[];f.schema.mappedClass;return c.toArray().then(function(a){d.$apply(function(){for(var f=0;f<a.length;f++)a[f]=new DexieRecord(c._ctx,d,a[f]);g=DexieSet.fromArray(c,d,a),g.$bind_to(b),e.resolve(g)})})["catch"](function(a){d.$apply(function(){e.reject(a)})}),e.promise};return{bind:e}}])}(),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{enumerable:!1,configurable:!0,writable:!0,value:function(a){if(null==this)throw new TypeError("Array.prototype.find called on null or undefined");if("function"!=typeof a)throw new TypeError("predicate must be a function");for(var b,c=Object(this),d=c.length>>>0,e=arguments[1],f=0;d>f;f++)if(f in c&&(b=c[f],a.call(e,b,f,c)))return b;return void 0}}),Array.isArray||(Array.isArray=function(a){return"[object Array]"===Object.prototype.toString.call(a)});